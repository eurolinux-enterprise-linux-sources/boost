From 502ebea876e52bbcf332794be577ef18384b0313 Mon Sep 17 00:00:00 2001
From: Douglas Gregor <doug.gregor@gmail.com>
Date: Thu, 29 Apr 2010 00:36:35 +0000
Subject: [PATCH] Various standards-conformance fixes for Boost.Interprocess.

[SVN r61665]
---
 .../container/detail/transform_iterator.hpp        |    2 +-
 .../interprocess/detail/managed_memory_impl.hpp    |    4 ++--
 .../interprocess/detail/transform_iterator.hpp     |    2 +-

diff --git a/include/boost/interprocess/containers/container/detail/transform_iterator.hpp b/include/boost/interprocess/containers/container/detail/transform_iterator.hpp
index 4e98c77..6ca8b69 100644
--- a/include/boost/interprocess/containers/container/detail/transform_iterator.hpp
+++ b/include/boost/interprocess/containers/container/detail/transform_iterator.hpp
@@ -51,7 +51,7 @@ struct operator_arrow_proxy<T&>
    // This function is needed for MWCW and BCC, which won't call operator->
    // again automatically per 13.3.1.2 para 8
 //   operator T*() const { return &m_value; }
-   mutable T &m_value;
+   T &m_value;
 };
 
 template <class Iterator, class UnaryFunction>
diff --git a/include/boost/interprocess/detail/managed_memory_impl.hpp b/include/boost/interprocess/detail/managed_memory_impl.hpp
index 8cf4e50..395b4d8 100644
--- a/include/boost/interprocess/detail/managed_memory_impl.hpp
+++ b/include/boost/interprocess/detail/managed_memory_impl.hpp
@@ -682,7 +682,7 @@ class basic_managed_memory_impl
    template<class T>
    typename allocator<T>::type
       get_allocator()
-   {   return mp_header->get_allocator<T>(); }
+   {   return mp_header->BOOST_NESTED_TEMPLATE get_allocator<T>(); }
 
    //!This is the default deleter to delete types T
    //!from this managed segment.
@@ -697,7 +697,7 @@ class basic_managed_memory_impl
    template<class T>
    typename deleter<T>::type
       get_deleter()
-   {   return mp_header->get_deleter<T>(); }
+   {   return mp_header->BOOST_NESTED_TEMPLATE get_deleter<T>(); }
 
    /// @cond
    //!Tries to find a previous named allocation address. Returns a memory
diff --git a/include/boost/interprocess/detail/transform_iterator.hpp b/include/boost/interprocess/detail/transform_iterator.hpp
index f98c641..b6e1139 100644
--- a/include/boost/interprocess/detail/transform_iterator.hpp
+++ b/include/boost/interprocess/detail/transform_iterator.hpp
@@ -54,7 +54,7 @@ struct operator_arrow_proxy<T&>
    // This function is needed for MWCW and BCC, which won't call operator->
    // again automatically per 13.3.1.2 para 8
 //   operator T*() const { return &m_value; }
-   mutable T &m_value;
+   T &m_value;
 };
 
 template <class Iterator, class UnaryFunction>
-- 
1.7.6.5

